package StepDefinitions;

import com.YourLogoOnlineShopping.Base.Base;
import com.YourLogoOnlineShopping.Pages.CheckoutPage;
import com.YourLogoOnlineShopping.Pages.HomePage;
import com.YourLogoOnlineShopping.Pages.Loginpage;

import cucumber.api.PendingException;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class StepDefs extends Base {
	
	Loginpage LoginPage;
	HomePage homepage;
	CheckoutPage checkout;
	
	
	@Given("^user is on login page$")
	public void user_is_on_login_page() throws Throwable {
		intialize();
	   
	    throw new PendingException();
	}

	@When("^user enters valid username and password$")
	public void user_enters_valid_username_and_password() throws Throwable {
	   LoginPage = new Loginpage();
	   LoginPage.signInToWebPage("demoShopping@gmail.com", "test@123");
	   System.out.println("This is username and password ");
	   
	   throw new PendingException();
	   
	}

	@Then("^user verifies the confirmaiton message$")
	public void user_verifies_the_confirmaiton_message() throws Throwable{
	   LoginPage = new Loginpage();

	   LoginPage.confirmationMessage();
	  
	   throw new PendingException();
	   
	}

	@Given("^user is on home page$")
	public void user_is_on_home_page() throws Throwable { 
		
		homepage = new HomePage();
	   homepage.YourLogoHome();	
		
	    throw new PendingException();
	}

	@When("^user chooses WOMEN category$")
	public void user_chooses_WOMEN_category() throws Throwable {
	    
		checkout = new CheckoutPage();
		checkout.WomenCategory();
		
		throw new PendingException();
	}

	@When("^user chooses TOP'S subcategory$")
	public void user_chooses_TOP_S_subcategory() throws Throwable {
	    
		checkout = new CheckoutPage();
		checkout.TopsSubCategory();
		
	    throw new PendingException();
	}

	@When("^user chooses T-SHIRTS subcategory$")
	public void user_chooses_T_SHIRTS_subcategory() throws Throwable {
	    
		checkout = new CheckoutPage();
		checkout.TShirtsSubCategory();
		
	    throw new PendingException();
	}

	@When("^user chooses first item to buy$")
	public void user_chooses_first_item_to_buy() throws Throwable {
		
		checkout = new CheckoutPage();
		checkout.SelectItem();
	   
		throw new PendingException();
	}

	@When("^user moves the selected item to cart$")
	public void user_moves_the_selected_item_to_cart() throws Throwable {
		
		checkout = new CheckoutPage();
		checkout.AddToCart();
	    
		throw new PendingException();
	}

	@When("^user checkout from cart$")
	public void user_checkout_from_cart() throws Throwable {
		
		checkout = new CheckoutPage();
		checkout.PlaceTheOrder();
	    
		throw new PendingException();
	}

	@When("^user selects payment method to confirm order$")
	public void user_selects_payment_method_to_confirm_order() throws Throwable {
	    
		checkout = new CheckoutPage();
		checkout.PayByCheck();
		
	    throw new PendingException();
	}

	@Then("^user verifies the order confirmation message$")
	public void user_verifies_the_order_confirmation_message() throws Throwable {
	   
		checkout = new CheckoutPage();
		checkout.OrderConfirmationMessage();
		
	    throw new PendingException();
	}

	@Given("^user is on homepage$")
	public void user_is_on_homepage() throws Throwable {
		
		homepage = new HomePage();
	    homepage.YourLogoHome();
	    
	    throw new PendingException();
	}

	@When("^user clicks signout button$")
	public void user_clicks_signout_button() throws Throwable {
	   
		homepage = new HomePage();
	    homepage.Logout();
			
	    throw new PendingException();
	}

	@Then("^user verifies Logout confirmaiton message$")
	public void user_verifies_Logout_confirmaiton_message() throws Throwable {
	    
		homepage = new HomePage();
	    homepage.LogoutconfimationMsg();
	    
	    throw new PendingException();
	}

}
